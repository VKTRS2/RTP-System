// Package {{.PackageName}}
// Do not Edit. This stuff it's been automatically generated.
package {{.PackageName}}

import (
    {{- range getComplexTypesImports .PackageName}}
    "{{ . }}"
    {{- end}}
)

{{ $packageName := .PackageName }}
{{ $tree := simpleVisit .PackageName }}

{{- range $tree.Paths}}
{{ $path := . }}
{{ $lastNode := .LastItem }}
{{ $lastNodeIndex := .LastItemIndex }}
{{- if and (ne $lastNode.Name "_self") (not $lastNode.IsStruct) }}
func (d*Document)  Get_{{ .Identifier }}() {{if $lastNode.IsPtr}}*{{end}}{{if $lastNode.IsArray}}[]{{end}}{{$lastNode.TypeWithPackageTrimmed $packageName}} {
{{- range $index, $element := .}}
   {{- if ne $element.Name "_self" }}
     {{- if ne $index $lastNodeIndex }}
       {{- if $element.IsArray }}
if len(d.{{$path.ItemPathReference $index}}) == 0 {
          {{- if or $lastNode.IsArray $lastNode.IsPtr}}
        return nil
          {{- else }}
        return {{$lastNode.TypeWithPackageTrimmed $packageName}}({{$lastNode.TypeWithPackageTrimmed $packageName}}Zero)
          {{- end }}
}
       {{- end}}
       {{- if $element.IsPtr }}
if d.{{$path.ItemPathReference $index}} == nil {
          {{- if or $lastNode.IsArray $lastNode.IsPtr}}
        return nil
          {{- else }}
        return {{$lastNode.TypeWithPackageTrimmed $packageName}}({{$lastNode.TypeWithPackageTrimmed $packageName}}Zero)
          {{- end }}
}
       {{- end}}
     {{- else }}
return d.{{$path.ItemPathReference $index}}
     {{- end }}

   {{- end }}
{{- end }}
}
{{- if $lastNode.IsArray}}
func (d*Document)  Get_{{ .Identifier }}_Item() {{if $lastNode.IsPtr}}*{{end}}{{$lastNode.TypeWithPackageTrimmed $packageName}} {
{{- range $index, $element := .}}
   {{- if ne $element.Name "_self" }}
     {{- if ne $index $lastNodeIndex }}
       {{- if $element.IsArray }}
if len(d.{{$path.ItemPathReference $index}}) == 0 {
          {{- if or $lastNode.IsArray $lastNode.IsPtr}}
        return {{$lastNode.TypeWithPackageTrimmed $packageName}}({{$lastNode.TypeWithPackageTrimmed $packageName}}Zero)
          {{- end }}
}
       {{- end}}
       {{- if $element.IsPtr }}
if d.{{$path.ItemPathReference $index}} == nil {
          {{- if or $lastNode.IsArray $lastNode.IsPtr}}
        return {{$lastNode.TypeWithPackageTrimmed $packageName}}({{$lastNode.TypeWithPackageTrimmed $packageName}}Zero)
          {{- end }}
}
       {{- end}}
     {{- else }}
return d.{{$path.ItemPathReference $index}}[0]
     {{- end }}

   {{- end }}
{{- end }}
}
{{- end }}
{{- end }}
{{- end }}