{{ define "simple-types-b64-ops" }}
const (
    {{ .Name }}Sample = "Value"
    {{ .Name }}Zero = ""
{{- if .HasLengthRestriction }}
    {{ .Name }}Length = {{.Restrictions.Length}}
    {{ .Name }}MinLength = {{.Restrictions.MinLength}}
    {{ .Name }}MaxLength = {{.Restrictions.MaxLength}}
{{- end}}
)

// IsValid checks if {{ .Name }} of type {{ .Type.Builtin }} is valid
func (t {{ .Name }}) IsValid(optional bool) bool {

     valid := xsdt.{{ .Type.Builtin }}(t).IsValid(optional)
{{- if .HasLengthRestriction }}
	if {{.Restrictions.MaxLength}} != 0 {
		valid = valid && len(t) < {{.Restrictions.MaxLength}}
	}
{{ end }}
     return valid
}

// String method for easy conversion
func (t {{ .Name }}) String() string {
    return string(t)
}

// To{{ .Name }} method for easy conversion with application of restrictions
func To{{ .Name }}(i interface{}) ({{ .Name }}, error) {

	s := ""
	switch ti := i.(type) {
	case fmt.Stringer:
		s = ti.String()
	case string:
		s = ti
	default:
		return "", fmt.Errorf("")
	}

{{- if .HasEnumRestriction }}
     if !isEnumRestrictionValid( s, {{ .Name }}EnumRestriction) {
        return "", fmt.Errorf("cannot satisfy enum restriction for %s of type {{ .Name }}", s)
     }
{{ end }}
{{- if .HasLengthRestriction }}
     if !isLengthRestrictionValid(s, {{ .Name }}Length,  {{ .Name }}MinLength, {{ .Name }}MaxLength) {
       return "", fmt.Errorf("cannot satisfy length restriction for %s of type {{ .Name }}", s)
     }
{{ end }}
{{- if .HasPatternRestriction }}
      if !isPatternRestrictionValid(s, {{ .Name }}PatternRestriction)  {
      return "", fmt.Errorf("cannot satisfy pattern restriction for %s of type {{ .Name }}", s)
      }
{{ end }}

    return {{ .Name }}(s), nil
}

// MustTo{{ .Name }} method for easy conversion with application of restrictions. Panics on error.
func MustTo{{ .Name }}(s interface{}) {{ .Name }} {
    v, err := To{{ .Name }}(s)
    if err != nil {
    panic(err)
    }

    return v
}

// {{ .Name }}Example method for generation of valid sample data
func {{ .Name }}Example() {{ .Name }} {
    return {{ .Name }}(generateB64SampleData())
}
{{ end }}